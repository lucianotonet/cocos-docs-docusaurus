"use strict";(self.webpackChunkcocos_docs_docusaurus=self.webpackChunkcocos_docs_docusaurus||[]).push([[2045],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return t?o.createElement(h,r(r({ref:n},d),{},{components:t})):o.createElement(h,r({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},79495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const i={},r="Getting Started Example - First Data Interaction",l={unversionedId:"editor/extension/first-communication",id:"editor/extension/first-communication",title:"Getting Started Example - First Data Interaction",description:"In the previous two documents Getting Started Example - Menu and Getting Started Example - Panel, we introduced:",source:"@site/docs/editor/extension/first-communication.md",sourceDirName:"editor/extension",slug:"/editor/extension/first-communication",permalink:"/docs/editor/extension/first-communication",draft:!1,editUrl:"https://github.com/cocos/cocos-docs/docs/editor/extension/first-communication.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extension Manager Panel",permalink:"/docs/editor/extension/extension-manager"},next:{title:"Getting Started Example - Panel",permalink:"/docs/editor/extension/first-panel"}},s={},p=[{value:"Open Another Extension&#39;s Panel",id:"open-another-extensions-panel",level:2},{value:"Communication with other extensions",id:"communication-with-other-extensions",level:2},{value:"Directional communication",id:"directional-communication",level:3},{value:"Broadcast communication",id:"broadcast-communication",level:3}],d={toc:p},m="wrapper";function c(e){let{components:n,...i}=e;return(0,a.kt)(m,(0,o.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started-example---first-data-interaction"},"Getting Started Example - First Data Interaction"),(0,a.kt)("p",null,"In the previous two documents ",(0,a.kt)("a",{parentName:"p",href:"/docs/editor/extension/first"},"Getting Started Example - Menu")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/editor/extension/first-panel"},"Getting Started Example - Panel"),", we introduced:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"How to create extensions"),(0,a.kt)("li",{parentName:"ul"},"How to define menus in extensions"),(0,a.kt)("li",{parentName:"ul"},"how to define messages in an extension"),(0,a.kt)("li",{parentName:"ul"},"How to define a panel in an extension")),(0,a.kt)("p",null,"This article demonstrates how two extensions can communicate with each other and will cover three topics:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"How to open a panel of another extension"),(0,a.kt)("li",{parentName:"ul"},"How to send a message to another extension"),(0,a.kt)("li",{parentName:"ul"},"How to send and listen to broadcast messages")),(0,a.kt)("h2",{id:"open-another-extensions-panel"},"Open Another Extension's Panel"),(0,a.kt)("p",null,"Sometimes we need to open another extension in an extension we wrote, so next we'll try to modify the extension example in ",(0,a.kt)("strong",{parentName:"p"},"Getting Started Example - Menu")," so that it opens the panel defined in ",(0,a.kt)("strong",{parentName:"p"},"Getting Started Example - Panel"),"."),(0,a.kt)("p",null,"The modified ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JSON5"},'{\n    "package_version": 2,\n    "version": "1.0.0",\n    "name": "hello-world",\n    ...\n    "contributions": {\n        "menu": [\n            {\n                "path": "Develop/HelloWorld",\n                "label": "test",\n                "message": "log"\n            },\n            {\n                "path": "Develop/HelloWorld",\n                "label": "open other",\n                "message": "open-other"\n            }\n        ],\n        "messages": {\n            "log": {\n                "methods": [\n                    "log"\n                ]\n            },\n            "open-other": {\n                "methods": [\n                    "openOther"\n                ]\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"We modified ",(0,a.kt)("inlineCode",{parentName:"p"},"contributions.menu"),", added ",(0,a.kt)("inlineCode",{parentName:"p"},"open other")," menu item, and put all the menus of this extension under Develop/HelloWorld. After refreshing the extension, you can find the menu items in the top menu bar as shown below."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"extension-menu-hw.png",src:t(272).Z,width:"952",height:"160"})),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"contributions.messages"),", we add an ",(0,a.kt)("inlineCode",{parentName:"p"},"open-other")," message and let the ",(0,a.kt)("inlineCode",{parentName:"p"},"openOther")," function in ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts")," handle this message."),(0,a.kt)("p",null,"The extension in ",(0,a.kt)("strong",{parentName:"p"},"Getting Started Example - Panel")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel"),", so we use ",(0,a.kt)("inlineCode",{parentName:"p"},"Editor.Panel.open('extension')")," to open its default panel, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"openOther(){\n    Editor.Panel.open('first-panel');\n}\n")),(0,a.kt)("p",null,"After executing the ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run build")," command at the root of ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world"),", go to ",(0,a.kt)("strong",{parentName:"p"},"Extension Manager")," to refresh the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," extension."),(0,a.kt)("p",null,"Click on the ",(0,a.kt)("strong",{parentName:"p"},"Develop")," -> ",(0,a.kt)("strong",{parentName:"p"},"HelloWorld")," -> ",(0,a.kt)("strong",{parentName:"p"},"open other")," menu item and you will see the example panel open."),(0,a.kt)("h2",{id:"communication-with-other-extensions"},"Communication with other extensions"),(0,a.kt)("h3",{id:"directional-communication"},"Directional communication"),(0,a.kt)("p",null,"In the above example, we open the ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," panel in ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"Editor.Panel.open('extension')"),". But if we are trying to do something else, this solution won't work."),(0,a.kt)("p",null,"When an extension wants to call the function of another extension, this can be done by sending a message to one of the extensions with the following function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Editor.Message.send(extensionName:string,messasge:string,...args:any[])\n")),(0,a.kt)("p",null,"The messages defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"contributions.messages")," of each extension are available to the public by default. In ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," we find the ",(0,a.kt)("inlineCode",{parentName:"p"},"open-panel")," message, which is used to open its own default panel. For simplicity, we replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"openOther")," function in ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"openOther(){\n    Editor.Message.send('first-panel','open-panel');\n}\n")),(0,a.kt)("p",null,"After recompiling the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," extension and refreshing it, click ",(0,a.kt)("strong",{parentName:"p"},"Develop")," -> ",(0,a.kt)("strong",{parentName:"p"},"HelloWorld")," -> ",(0,a.kt)("strong",{parentName:"p"},"open other")," menu item again, you can see the default panel of ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," is opened."),(0,a.kt)("h3",{id:"broadcast-communication"},"Broadcast communication"),(0,a.kt)("p",null,"When an extension wants to notify all extensions across the system of the completion of an event, it can do so by broadcasting a message with the following function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Editor.Message.broadcast(message:string, ...args:any[])` \n")),(0,a.kt)("p",null,"Next, we define a broadcast message called ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel:open"),", which is broadcast by the ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," extension and listened to by the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," extension."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world"),", we add a new message listener and specify the handler function, with the following modified ",(0,a.kt)("inlineCode",{parentName:"p"},"contributions.messages"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json5"},'{\n    "messages": {\n        "log": {\n            "methods": [\n                "log"\n            ]\n        },\n        "open-other": {\n            "methods": [\n                "openOther"\n            ]\n        },\n        "first-panel:open":{\n            "methods": [\n                "onFirstPanelOpen"\n            ]\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Then add the following handler function to ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'onFirstPanelOpen(){\n    console.log("hello-world knows first-panel is open");\n}\n')),(0,a.kt)("p",null,"The transformation as a listener is done, next we modify the broadcast side ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel"),"."),(0,a.kt)("p",null,"Add the following broadcast message code to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/panels/default/index.ts :ready")," function in the `",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'Editor.Message.broadcast("first-panel:open");\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ready")," function will be called when the default panel of ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," is opened, at which point the ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel:open")," message will be broadcast."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note"),": Broadcasters can also listen for their own broadcast messages in messages, but this is usually not necessary.")),(0,a.kt)("p",null,"Compile and refresh the two extensions separately, click again on the ",(0,a.kt)("strong",{parentName:"p"},"Develop")," -> ",(0,a.kt)("strong",{parentName:"p"},"HelloWorld")," -> ",(0,a.kt)("strong",{parentName:"p"},"open other")," menu item, and you will see the sample panel opened, in addition to the following print in the Cocos Creator console window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"hello-world knows first-panel is open\n")),(0,a.kt)("p",null,"This means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-world")," extension has received a broadcast message from the ",(0,a.kt)("inlineCode",{parentName:"p"},"first-panel")," extension."),(0,a.kt)("p",null,"For more message-related details, please refer to the documentation ",(0,a.kt)("a",{parentName:"p",href:"/docs/editor/extension/messages"},"Message System"),"."))}c.isMDXComponent=!0},272:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/extension-menu-hw-1500d0ef7d16487e00dd7ad9b46a9c82.png"}}]);