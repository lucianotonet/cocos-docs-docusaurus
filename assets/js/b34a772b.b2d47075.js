"use strict";(self.webpackChunkcocos_docs_docusaurus=self.webpackChunkcocos_docs_docusaurus||[]).push([[9846],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),c=o,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||a;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<a;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},43569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=t(87462),o=(t(67294),t(3905));const a={},r="Customize the Main Menu",l={unversionedId:"editor/extension/contributions-menu",id:"editor/extension/contributions-menu",title:"Customize the Main Menu",description:"There is a main menu bar at the top of the editor, and it is easy to add your own menu in this menu bar within the extension.",source:"@site/docs/editor/extension/contributions-menu.md",sourceDirName:"editor/extension",slug:"/editor/extension/contributions-menu",permalink:"/docs/editor/extension/contributions-menu",draft:!1,editUrl:"https://github.com/cocos/cocos-docs/docs/editor/extension/contributions-menu.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extending the Database (DB)",permalink:"/docs/editor/extension/contributions-database"},next:{title:"Customized Messages",permalink:"/docs/editor/extension/contributions-messages"}},s={},u=[{value:"Registering menus",id:"registering-menus",level:2},{value:"path",id:"path",level:3},{value:"label",id:"label",level:3},{value:"icon",id:"icon",level:3},{value:"message",id:"message",level:3}],p={toc:u},m="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"customize-the-main-menu"},"Customize the Main Menu"),(0,o.kt)("p",null,"There is a main menu bar at the top of the editor, and it is easy to add your own menu in this menu bar within the extension."),(0,o.kt)("h2",{id:"registering-menus"},"Registering menus"),(0,o.kt)("p",null,"When an extension needs to add a menu, just fill in the ",(0,o.kt)("inlineCode",{parentName:"p"},"contributions.menu"),' object. For example, if we add a menu item to the "Extensions" menu, we can modify ',(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," with the following code example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json5"},'{\n    // package.json\n    "name": "hello-world",\n    "contributions": {\n        "messages": {\n            "open-panel": {\n                "methods": ["openPanel"]\n            }\n        },\n        "menu": [\n            {\n                "path": "i18n:menu.extension",\n                "label": "Open Hello World",\n                "icon": "./static/icon.png",\n                "message": "open-panel"\n            }\n        ]\n    }\n}\n')),(0,o.kt)("p",null,'The above configuration information will add a new "Open Hello World" menu in the "Extensions" menu of the editor. Clicking this menu will send an ',(0,o.kt)("inlineCode",{parentName:"p"},"open-panel")," message to the current extension according to the message configuration, which will be triggered if the current extension is configured to listen to this message and the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"openPanel")," handler."),(0,o.kt)("p",null,"For the definition of messages, please refer to the documentation ",(0,o.kt)("a",{parentName:"p",href:"/docs/editor/extension/contributions-messages"},"Customized Messages"),"."),(0,o.kt)("p",null,"Let's look at the meaning of the fields in the ",(0,o.kt)("inlineCode",{parentName:"p"},"menu")," object."),(0,o.kt)("h3",{id:"path"},"path"),(0,o.kt)("p",null,"type {string} required"),(0,o.kt)("p",null,"The format is: ","[top existing menu path][/path1]","[/path2]",", and the following is reasonable."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"i18n:menu.extension")," - with the extension menu as the parent menu"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"i18n:menu.extension/Hello World")," - adds a ",(0,o.kt)("inlineCode",{parentName:"li"},"Hello World")," menu item to the extension menu as a parent menu"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MyMenu")," - Adds a ",(0,o.kt)("inlineCode",{parentName:"li"},"MyMenu")," menu to the top menu bar as a parent menu"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MyMenu/Hello World")," - adds a ",(0,o.kt)("inlineCode",{parentName:"li"},"MyMenu")," to the top menu bar and adds a ",(0,o.kt)("inlineCode",{parentName:"li"},"Hello World")," menu item as a parent")),(0,o.kt)("p",null,"In the top menu bar, the pre-defined menus are"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'i18n:menu.project - the "Project" menu'),(0,o.kt)("li",{parentName:"ul"},'i18n:menu.node - the "Node" menu'),(0,o.kt)("li",{parentName:"ul"},'i18n:menu.panel - "Panel" menu'),(0,o.kt)("li",{parentName:"ul"},'i18n:menu.extension - "Extensions" menu'),(0,o.kt)("li",{parentName:"ul"},'i18n:menu.develop - "Developers" menu')),(0,o.kt)("h3",{id:"label"},"label"),(0,o.kt)("p",null,"Type {string} Required"),(0,o.kt)("p",null,"The name of the menu item, supports i18n:key syntax."),(0,o.kt)("h3",{id:"icon"},"icon"),(0,o.kt)("p",null,"Type {string} Optional"),(0,o.kt)("p",null,"Relative path to the icon of the menu, the material used by the extension is usually placed under a folder named ",(0,o.kt)("inlineCode",{parentName:"p"},"static"),", if it doesn't exist, create a new one."),(0,o.kt)("h3",{id:"message"},"message"),(0,o.kt)("p",null,"Type {string} Optional"),(0,o.kt)("p",null,"The message that will be triggered when the menu is clicked, this message needs to be defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"contributions.messsages")," first."))}d.isMDXComponent=!0}}]);